// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: definition.proto

package definition

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Gender int32

const (
	Gender_men   Gender = 0
	Gender_women Gender = 1
)

var Gender_name = map[int32]string{
	0: "men",
	1: "women",
}

var Gender_value = map[string]int32{
	"men":   0,
	"women": 1,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}

func (Gender) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f461df25659d4bef, []int{0}
}

type Account struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" idx:"normal"`
	IdentityId           string   `protobuf:"bytes,3,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty" idx:"unique"`
	PhoneNumber          string   `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty" idx:"union"`
	Country              string   `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty" idx:"union"`
	Age                  uint32   `protobuf:"varint,6,opt,name=age,proto3" json:"age,omitempty" idx:"normal"`
	Gender               Gender   `protobuf:"varint,7,opt,name=gender,proto3,enum=definition.Gender" json:"gender,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_f461df25659d4bef, []int{0}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Account) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *Account) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Account) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Account) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Account) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_men
}

func init() {
	proto.RegisterEnum("definition.Gender", Gender_name, Gender_value)
	proto.RegisterType((*Account)(nil), "definition.Account")
}

func init() { proto.RegisterFile("definition.proto", fileDescriptor_f461df25659d4bef) }

var fileDescriptor_f461df25659d4bef = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4e, 0xf2, 0x40,
	0x14, 0xc7, 0x99, 0x02, 0x6d, 0x78, 0xf0, 0xf1, 0x35, 0xb3, 0x9a, 0x18, 0x53, 0x9a, 0x89, 0x8b,
	0x4a, 0x22, 0x44, 0xdc, 0xb9, 0x93, 0x8d, 0x71, 0xe3, 0xa2, 0x17, 0x20, 0x94, 0x19, 0xca, 0x24,
	0xf6, 0x0d, 0x36, 0x33, 0x51, 0x6e, 0xe2, 0xd6, 0xdb, 0xb8, 0xf4, 0x04, 0xc4, 0xd4, 0x1b, 0x70,
	0x02, 0xc3, 0x60, 0xa3, 0x31, 0xec, 0xde, 0x7b, 0xbf, 0xdf, 0x3f, 0x79, 0xf9, 0x43, 0x28, 0xe4,
	0x52, 0xa1, 0x32, 0x4a, 0xe3, 0x68, 0x5d, 0x6a, 0xa3, 0x29, 0xfc, 0x5c, 0x4e, 0x2e, 0x72, 0x65,
	0x56, 0x36, 0x1b, 0x2d, 0x74, 0x31, 0xce, 0x75, 0xae, 0xc7, 0x4e, 0xc9, 0xec, 0xd2, 0x6d, 0x6e,
	0x71, 0xd3, 0x21, 0xca, 0x5f, 0x3d, 0x08, 0x6e, 0x16, 0x0b, 0x6d, 0xd1, 0xd0, 0x3e, 0x78, 0x4a,
	0x30, 0x12, 0x93, 0xa4, 0x95, 0x7a, 0x4a, 0xd0, 0x33, 0x68, 0xe1, 0xbc, 0x90, 0xcc, 0x8b, 0x49,
	0xd2, 0x99, 0x86, 0xbb, 0xed, 0xa0, 0xa7, 0xc4, 0xf3, 0x35, 0x47, 0x5d, 0x16, 0xf3, 0x07, 0x9e,
	0x3a, 0x4a, 0x2f, 0xa1, 0xab, 0x84, 0x44, 0xa3, 0xcc, 0x66, 0xa6, 0x04, 0x6b, 0xfe, 0x91, 0x2d,
	0xaa, 0x47, 0x2b, 0x79, 0x0a, 0xb5, 0x74, 0x27, 0xe8, 0x04, 0x7a, 0xeb, 0x95, 0x46, 0x39, 0x43,
	0x5b, 0x64, 0xb2, 0x64, 0x2d, 0x97, 0xf9, 0xbf, 0xdb, 0x0e, 0xba, 0x75, 0x46, 0x23, 0x4f, 0xbb,
	0x4e, 0xba, 0x77, 0x0e, 0x3d, 0x87, 0xc0, 0x7d, 0x59, 0x6e, 0x58, 0xfb, 0xb8, 0x5e, 0x73, 0xca,
	0xa1, 0x39, 0xcf, 0x25, 0xf3, 0x63, 0x92, 0xfc, 0x3b, 0xf2, 0xf6, 0x1e, 0xd2, 0x21, 0xf8, 0xb9,
	0x44, 0x21, 0x4b, 0x16, 0xc4, 0x24, 0xe9, 0x4f, 0xe8, 0xe8, 0x57, 0xab, 0xb7, 0x8e, 0xa4, 0xdf,
	0xc6, 0xf0, 0x14, 0xfc, 0xc3, 0x85, 0x06, 0xd0, 0x2c, 0x24, 0x86, 0x0d, 0xda, 0x81, 0xf6, 0x93,
	0xde, 0x8f, 0x64, 0x1a, 0xbe, 0x55, 0x11, 0x79, 0xaf, 0x22, 0xf2, 0x51, 0x45, 0xe4, 0xe5, 0x33,
	0x6a, 0x64, 0xbe, 0xab, 0xf6, 0xea, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x00, 0x40, 0x7e, 0xa9,
	0x01, 0x00, 0x00,
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Gender != 0 {
		i = encodeVarintDefinition(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x38
	}
	if m.Age != 0 {
		i = encodeVarintDefinition(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintDefinition(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintDefinition(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IdentityId) > 0 {
		i -= len(m.IdentityId)
		copy(dAtA[i:], m.IdentityId)
		i = encodeVarintDefinition(dAtA, i, uint64(len(m.IdentityId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDefinition(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDefinition(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDefinition(dAtA []byte, offset int, v uint64) int {
	offset -= sovDefinition(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDefinition(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDefinition(uint64(l))
	}
	l = len(m.IdentityId)
	if l > 0 {
		n += 1 + l + sovDefinition(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovDefinition(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovDefinition(uint64(l))
	}
	if m.Age != 0 {
		n += 1 + sovDefinition(uint64(m.Age))
	}
	if m.Gender != 0 {
		n += 1 + sovDefinition(uint64(m.Gender))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDefinition(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDefinition(x uint64) (n int) {
	return sovDefinition(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefinition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefinition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefinition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefinition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefinition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefinition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefinition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefinition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefinition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefinition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefinition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefinition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefinition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefinition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefinition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefinition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= Gender(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDefinition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefinition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDefinition(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDefinition
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDefinition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDefinition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDefinition
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDefinition
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDefinition
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDefinition        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDefinition          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDefinition = fmt.Errorf("proto: unexpected end of group")
)
